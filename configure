#!/bin/sh
#
# Configure script for 'mdp'
# Copyright (c) 2012 Bertrand Janin <b@grun.gy>
#
#

MDP_VERSION=0.1
if [ -z "$CC" ]; then
	export CC=gcc
fi


# check_libbsd() - Check if libbsd is installed
check_libbsd() {
	echo -n "Checking for libbsd... "

	cat > test_libbsd.c <<EOF
#include <string.h>

int
main()
{
	char buf[128];
	strlcpy(buf, "./configure for mdp", sizeof(buf));
	return 0;
}
EOF

	if ! $CC -lbsd test_libbsd.c -o test_libbsd 2> /dev/null; then
		echo "libbsd not found =( (try apt-get install libbsd0 libbsd-dev)"
		rm -f test_libbsd*
		exit
	fi

	rm -f test_libbsd*
	echo "found"

	return 0
}


# clean() - Remove config, Makefiles...
clean() {
	[ -r "Makefile" ] && make clean
	rm -f src/config.h Makefile src/Makefile
}


# distclean() - Remove unnecessary media sources, svn dirs, etc.
distclean() {
	clean > /dev/null
	find . -name ".svn" -type d -exec rm -rf {} \;
	find data -name "*.svg" -exec rm -f {} \;
	find data -name "*.xcf" -exec rm -f {} \;
	rm -f data/music/*wav
	rm -f doc/DOWNLOADS
	rm -f data/Makefile data/gfx/Makefile data/music/Makefile
	rm -rf data/gfx/tools
}


# generate_config_h() - Generate the config.h file
generate_config_h() {
	echo "/* Automagically generated by 'configure' */"
	echo

	echo "#define VERSION \"rezerwar $REZERWAR_VERSION\""
	[ -n "$CFG_DATAPATH" ]	&& echo "#define DATAPATH \"$CFG_DATAPATH\""
	[ -n "$CFG_CFGPATH" ]	&& echo "#define CFGPATH \"$CFG_CFGPATH\""
	[ -z "$CFG_NOSOUND" ]	&& echo "#define WITH_SOUND"
}


# generate_makefile() - Generate the main Makefile
generate_makefile() {
	echo "# Automagically generated by 'configure'"
	echo

	if [ -n "$MK_OVERRIDE" ]; then
		cat $MK_OVERRIDE
		return 0
	fi

	[ -n "$MK_EXTRAOBJS" ] && echo "OBJECTS += $MK_EXTRAOBJS"

	if [ "$NEED_LIBBSD" = "Y" ]; then
		echo "LDFLAGS+=-lbsd"
	fi

	if [ "$DEBUG_MODE" = "Y" ]; then
		echo "CFLAGS+=-ggdb -O1 $X_CFLAGS"
	else
		echo "CFLAGS+=-Wall -O2 $X_CFLAGS"
	fi

	echo "CC?=gcc"

	cat Makefile.src
}


# help() - Spit out basic help
help() {
	echo "usage: ./configure [-h] [-l] [-d] [platform]"
	echo
	echo "    -h   this help screen."
	echo "    -l   list supported platforms"
	echo
	echo "    -c   clean up"
	echo
	echo "By default, this script will attempt to detect your OS and will guess the most"
	echo "appropriate configuration. If it gets your system wrong, you can force it,"
	echo "here is the list of ''supported'' platforms:"
	echo
	echo "    bsd     - OpenBSD, FreeBSD, OS X, Darwin, ..."
	echo "    linux   - Linux"
	exit
}


# Command-line handling
case $* in
	-h*|--h*)
		help
		;;
	-c)
		echo "Cleaning up..."
		clean
		exit
		;;
	-d)
		echo "Cleaning up for distribution..."
		distclean
		exit
		;;
esac


# Detect platform
echo -n "Target platform... "
OS=`uname`
if [ -n "$*" ]; then
	OS="$*"
fi
echo $OS


# Platform-specific configuration
case $OS in
Linux|Unix|POSIX)
	check_libbsd
	X_CFLAGS="-DLIBBSD -D_GNU_SOURCE"
	NEED_LIBBSD="Y"
	NEED_LIBSSL="Y"
	;;
*BSD|Darwin)
	;;
*)
	echo
	echo "Sorry but '$OS' is currently unsupported, you can attemp 'bsd' or 'linux' as"
	echo "target and cross your fingers. In order to do that you just need to give either"
	echo "one as parameter to ./configure. You can get the official list of supported "
	echo "platform with ./configure -l"
	exit
esac

[ -z "$PREFIX" ]	&& PREFIX="/usr"
[ -z "$TARGET_BIN" ]	&& TARGET_BIN="$PREFIX/games"
[ -z "$TARGET_DOC" ]	&& TARGET_DOC="$PREFIX/share/doc/rezerwar"
[ -z "$TARGET_DATA" ]	&& TARGET_DATA="$PREFIX/share/games/rezerwar"

# generate_config_h > src/config.h
generate_makefile > Makefile


echo
echo "Configured for '$OS', run 'make' (or 'gmake') to compile."

