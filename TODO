BUGS
 - If the gpg_timeout kicks in, we still spawn the editor, wrongly.

 - Properly kill the pid watch for gpg, it remains in the background on OS X.

 - Don't use a buffer to read lines in the password file, assume
   lines can have any length.

 - Use the key_id for decrypt if possible or don't let the user edit unless the
   key is valid.

NEEDED FEATURES
 - Create "profiles" for password styles allowing the configuration of:
   - number of chars (-g without parameter).
   - character set used in the randomization.

 - '-a' will add a password, taking a number of strings in order of argv and
   using a format defined in the config file, this avoids opening the passwords
   on screen in the first place. document it.

OTHER IDEAS
 - Automatically kill the editor if it lingers. Better lose one passwords than
   leak all of them.

 - git and/or mercurial integration with auto push/pull and conflict resolution
   (lines stored separately?)

 - Store/backup automatically to S3? or maybe storage works like wal logs in pg
   and the user can define put and get commands?

 - Define a comment character? That would allow to skip headers and disable older
   passwords (only used when filtering).

 - Other types of encryption (aes-256 via openssl?)

 - If gpg times out while you're typing your password, it appears clear on
   screen, can we capture the keystrokes in a sub-process? Can we spawn a dummy
   prompt without echo after killing gpg?
